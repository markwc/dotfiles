;;====================================================================
;; Mark Christiansen's .emacs file.
;;====================================================================

(custom-set-variables
 '(user-mail-address "mark.w.christiansen@l-3com.com"))

;;====================================================================
;; Add search paths.
;;====================================================================

(add-to-list 'load-path "~/.dotfiles/emacs/lisp")
(add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'load-path "~/.emacs.d/lisp/company-mode")
(add-to-list 'load-path "~/.emacs.d/lisp/org-mode")

;;====================================================================
;; Basic setup.
;;====================================================================

(show-paren-mode t)                     ; Show me the parenthesis!
(setq-default indent-tabs-mode nil)     ; I hate tabs!
(global-font-lock-mode 1)               ; I like colors!

;;====================================================================
;; Set global function keys.
;;====================================================================

(global-unset-key (kbd "<f1>"))
(global-unset-key (kbd "<f2>"))
(global-set-key (kbd "<f3>") 'isearch-forward)
(global-set-key (kbd "<S-f3>") 'isearch-backward)
(global-unset-key (kbd "<f4>"))
(global-unset-key (kbd "<f5>"))
(global-set-key (kbd "<f5>") 'gdb)
(global-unset-key (kbd "<f6>"))
(global-set-key (kbd "<f7>") 'compile)
(global-unset-key (kbd "<f8>"))
(global-unset-key (kbd "<f9>"))
(global-unset-key (kbd "<f10>"))
(global-unset-key (kbd "<f11>"))
(global-set-key (kbd "<f12>") 'gtags-mode)

;;====================================================================
;; Set other global keys.
;;====================================================================

(global-set-key (kbd "C-c i") 'indent-region)
(global-set-key (kbd "C-x C-i") 'insert-file)
(global-set-key (kbd "C-x C-m") 'toggle-read-only)
(global-set-key (kbd "C-x =") 'what-line)
(global-set-key (kbd "C-z") 'goto-line)
(global-set-key (kbd "M-r") 'query-replace)
(global-set-key (kbd "M-R") 'query-replace-regexp) ;; NB: uses upper-case "R"
(global-set-key (kbd "M-C-s") 'isearch-forward-regexp)
(global-set-key (kbd "M-C-r") 'isearch-backward-regexp)

;;====================================================================
;; Useful for keeping packets up to date.
;;====================================================================

(defun sacha/package-install (package &optional repository)
  "Install PACKAGE if it has not yet been installed.
If REPOSITORY is specified, use that."
  (unless (package-installed-p package)
    (let ((package-archives
           (if repository
               (list (assoc repository package-archives))
             package-archives)))
      (package-install package))))

;;====================================================================
;; Version/backup stuff.
;;====================================================================

(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying-when-linked t)	; Preserve hard-links
(setq auto-save-default nil)		; Disabled
(setq auto-save-list-file-prefix nil)	; Learn to use ^X^S

;;====================================================================
;; Color settings for version 21.x and below (not supported by 22.x):
;;====================================================================

(if (and (eq window-system 'x) (<= emacs-major-version 21))
    (progn
      ;; This is the color for keywords.
      (set-face-foreground 'bold "blue") 
      ;; This is the color for function declarations/defines.
      (set-face-foreground 'bold-italic "red")
      ;; This is the color for comments and type. 
      (set-face-foreground 'italic "cadetblue")
      ;; This is the colors for strings.
      (set-face-foreground 'underline "orangered")
      
      ;; These lines turn on colored keywords as 'bold.
      (require 'font-lock)

      (setq c-font-lock-keywords   c-font-lock-keywords-2
            c++-font-lock-keywords c-font-lock-keywords-2)
      (add-hook 'c-mode-common-hook
                (function (lambda () (font-lock-mode 1))))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-report-syntactic-errors t)
 '(inhibit-startup-screen t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;====================================================================
;; Wack the whitespace
;;====================================================================

(defun whack-whitespace (arg)
  "Delete all white space from point to the next word.  With prefix ARG
    delete across newlines as well.  The only danger in this is that you
    don't have to actually be at the end of a word to make it work.  It
    skips over to the next whitespace and then whacks it all to the next
    word."
  (interactive "P")
  (let ((regexp (if arg "[ \t\n]+" "[ \t]+")))
    (re-search-forward regexp nil t)
    (replace-match "" nil nil)))
(setq column-number-mode t)

;;====================================================================
;; word count stuff
;;====================================================================

(defvar count-words-buffer
  nil
  "*Number of words in the buffer.")

(defun wicked/update-wc ()
  (interactive)
  (setq count-words-buffer (number-to-string (count-words-buffer)))
  (force-mode-line-update))

                                        ; only setup timer once
(unless count-words-buffer
  ;; seed count-words-paragraph
  ;; create timer to keep count-words-paragraph updated
  (run-with-idle-timer 1 t 'wicked/update-wc))

;; add count words paragraph the mode line
(unless (memq 'count-words-buffer global-mode-string)
  (add-to-list 'global-mode-string "words: " t)
  (add-to-list 'global-mode-string 'count-words-buffer t)) 

;; count number of words in current paragraph
(defun count-words-buffer ()
  "Count the number of words in the current paragraph."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((count 0))
      (while (not (eobp))
	(forward-word 1)
        (setq count (1+ count)))
      count)))

;;====================================================================
;; insert date and time 
;;====================================================================

(defvar current-date-time-format "%D %a %X")
(defvar current-date-format "%a %d %b %Y" 
  "Format of date to insert with `insert-current-date' func 
See help of `format-time-string' for possible replacements") 
;;(defvar current-time-format "%a %H:%M:%S" 
(defvar current-time-format "%H:%M:%S"
  "Format of date to insert with `insert-current-time' func. 
Note the weekly scope of the command's precision.") 
(defun insert-current-date () 
  "insert the current date and time into current buffer."
  (interactive) 
  (insert (format-time-string current-date-time-format (current-time)))
  ) 
(defun insert-current-time () 
  "insert the current time (1-week scope) into the current buffer." 
  (interactive) 
  (insert (format-time-string current-time-format (current-time))) 
  ) 
(global-set-key (kbd "C-c C-d") 'insert-current-date) 
(global-set-key (kbd "C-c C-t") 'insert-current-time)

;;====================================================================
;; Other customizations.
;;====================================================================

(setq auto-mode-alist
      (cons '("\\.txt\\'" . outline-mode) auto-mode-alist))

(autoload 'markdown-mode "markdown-mode" "For editing Markdown files" t)
(setq auto-mode-alist (cons '("\\.md\\'" . markdown-mode) auto-mode-alist))

(require 'pomodoro)
(require 'use-package)       ; https://github.com/jwiegley/use-package
(require 'bind-key)          ; https://github.com/jwiegley/use-package
(require 'sql)

(load "~/.dotfiles/emacs/coding-stuff.emacs")
(load "~/.dotfiles/emacs/matlab-mode.emacs")
(load "~/.dotfiles/emacs/org-mode.emacs")
(load "~/.dotfiles/emacs/latex-mode.emacs")
